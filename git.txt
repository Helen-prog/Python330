index.html

align = left | center | right | justify

	h1
h2
		h3
h4
	h5
		h6
		

Ctrl + /		
<!-- Комментарий -->

H20

open in browser

Ctrl + H
align="
style="text-align: 


*.jpg (*.jpeg)
*.png
*.gif

file:///D:/WEB326/HTML/form/form.html?name=Olga&psw=123456&pol=on#file.php
file:///D:/WEB326/HTML/form/form.html#file.php


  Создать web-страницу с адаптивным изображением
  шапки и футера и адаптивным видео

Montserrat 
800
700
600
500



JSON - представление объектов JS (формат данных)


http://f0844296.xsph.ru
http://f0844296.xsph.ru/index1.html
http://f0844296.xsph.ru/other.html


AJAX – технология взаимодействия с сервером без перезагрузки страницы. Технологии AJAX уже более 20 лет.
(появился в марте 1999 года)
Asynchronous
Javascript
And
XML (JSON)

http://localhost/ajax
http://localhost/ajax/new.html
http://127.0.0.1

current.json

{
	"current": {
		"usd": 90
	}
}






Win + R -> cmd
python

py

1.py

print('Hello world!')

python 1.py
py 1.py

IDLE

Ctrl + /

import keyword
keyword.kwlist

0 - 9
вонона - 1
вороны - 2, 3, 4
ворон - 5, 6, 7, 8, 9, 0

условие ? true : false

git --version
git --help

git init
- создание репозитория (создается один раз в пределать одного репозитория)

git status
- для просмотра в каком состоянии находится репозиторий

git add main.py
		-A, --all - будут отслеживаться файлы, которые находится в папке и во всех подпапках
		. - добавляет все файлы из текущей директории
		
git config --global user.name 'new user'
git config --global user.email 'test@mail.ru'

git commit -m "first commit"
- создание контрольной точки

.gitignore

text.txt
folder
	test.txt
	
readme.md

		
git branch
- показать ветки
git branch test
- созадать новую ветку

git branch -D test
- удалить ветку

git branch readme
git checkout readme
- перейти на ветку

git checkout master


master               readme
	main.py             main.py
	readme.md			readme.md
	new.py
						
git merge readme
- слияние веток

git branch -D readme

git log
- просмотр коммитов



Токен: 


Win + R -> control

Диспечер учетных данных

Учетные данные Windows

https://github.com

git remote add origin https://github.com/Helen-prog/Python330.git

git push -u origin master

e1be7fa24a32ca053adae7eaf7d6a7414d47fbbe

git status
1) git add .
2) git commit -m "added print"
3) git push

git clone https://github.com/Helen-prog/Python330.git
- склонировать репозиторий

git pull
- забрать данные с gitHub


сlass Имя:
	свойства (переменные, поля)
		- статические
		- динамические
	методы (функции)
		- статические  (нет self)
		- класса  (cls)
		- экземпляра класса (self)
	
	атрибуты = свойства + методы
	
	
Модификаторы доступа:
public (открытое свойство) - self.x
protected (при наследовании)  - self._x
private (закрытое свойство) - self.__x

Наследование

Базовый (родительский, суперкласс)
	Дочерний (класс-наследник, подкласс)
	

DRY (Don't Repeat Yourself) - не повторяйся!


group = [
 Student("Батодалаев", "Даши", 16, "ГК", "Web_011", 5),
 Student("Загидуллин", "Линар", 32, "РПО", "PD_011", 5),
 Graduate("Шугани", "Сергей", 15, "РПО", "PD_011", 5, "Защита персональных данных"),
 Teacher("Даньшин", "Андрей", 38, "Астрофизика", 110),
 Student("Маркин", "Даниил", 17, "ГК", "Python_011", 5),
 Teacher("Башкиров", "Алексей", 45, "Разработка приложений", 20)
]
for i in group:
 i.info()
 
 
geometry
	__init__.py
	rect.py
	sq.py
	trian.py



import sys
sys.path

car (пакет)
	__init__.py
	carclass.py
	elecrtocar.py
	
# marshal  (*.pyc)
# pickle
# json


dump() - сохраняет данне в открытый файл
load() - считывание данных из файла

dumps() - сохраняет данные в строку
loads() - считывает данные из стоки



[{},{},{},{},{}][{},{},{},{},{}]

pip install requests
pip install beautifulsoup4 или bs4


data.csv

Имя,Профессия,Год рождения
Виктор,Веб-дизайнер,1995
Игорь,Программист,1983
Роман,Администратор,1990

csv.reader()  => []
csv.DictReader()  => {}

csv.writer()  => []
csv.DictWrite()  => {}


pip install lxml

https://ru.wordpress.org/plugins/browse/popular/page/1/
https://ru.wordpress.org/plugins/browse/popular/page/2/
https://ru.wordpress.org/plugins/browse/popular/page/3/


https://ru.wordpress.org/plugins/browse/popular/page/49/

parsers.py


articles
	project_articles.py
	controller.py
	model.py
	view.py

127.0.0.1:5000


http://127.0.0.1:5000/
http://127.0.0.1:5000/blog

http://127.0.0.1:5000/new


view.py

templates
	index.html
	blog.html
	

*.db, *.db3, *.sqlite, *.sqlite3

SELECT * FROM users

SELECT [ALL | DISTINCT] {* | столбец_1 [, столбец_2]}
FROM таблица_1 [, таблица_2]
WHERE условие
	=, ==, <>, !=, >, >=, <, <=
	AND OR
	выражение [NOT] BETWEEN начальное_значение AND конечное_значение
	выражение [NOT] LIKE шаблон_строки
		% - любое количество символов
		_ - один любой символ
	выражение [NOT] GLOB регулярное_выражение
		* - любое количество символов
		? - один любой символ(может отсутствовать)
		. - один любой символ
		[символы] ([abc]) - соответствует одному любому одиночному символу указанному в скобках
		[начальный_символ-конечный символ] ([a-zA-Z0-9]) - соответствует одному любому одиночному символу указанному внутри диапазона
		[^символы] ([^0-9]) - все кроме заданного диапазона символов
	выражение IS [NOT] NULL 	
	выражение IS 
	выражение [NOT] IN (набор_значений | выражение)
GROUP BY (группировать по) выражение
HAVING условие
ORDER BY col_name | col_number [ASC | DESC], ...
LIMIT количество_срок [OFFSET смещение]

LIMIT [смещение,] количество_строк
	
	
3. Показать атрибуты с фамилиями и зарплатой.
4. Написать запрос, который выводит таблицу в следующем порядке: должность, фамилия, зарплата.
5. Какие зарплаты есть на фирме

8. Составить список всех менеджеров и директоров.
9. Написать запрос который выводит фамилии менеджеров зарплата которых меньше 2000 и опыт работы больше 3 лет.


INSERT INTO имя_таблицы [столбец_1, столбец_2]
VALUES (значение_1, значение_2)


INSERT INTO имя_таблицы [столбец_1, столбец_2]
SELECT список_столбцов
FROM список_таблиц
WHERE условие


UPDATE имя_таблицы
SET столбец_1=значение_1, столбец_2=значение_2
[WHERE условие]


DELETE FROM имя_таблицы
[WHERE условие]


8. Вывести коды всех продавцов заказчики, которых работают в городе Москва и не живут там.

9. Выведите в обратном порядке фамилии всех заказчиков, которых обслуживает продавец с номером 1012.

10. Определите всех заказчиков, которые живут во Владимире, и не покупали кухонные стенки.

11. Определите в магазинах, каких городов продаются диваны этой фирмы. (Вывести атрибуты характеризующие город, товар и место продажи).


12. Вывести на первом месте код продавца, на втором фамилию заказчика. Код должен быть упорядочен в прямом порядке, а фамилии в обратном. 

13. Напишите запрос, который выведет коды всех продавцов заказчики, которые живут в Химках и покупают стулья.

14. Определите города, в которых продают стулья или столы для ПК.

15. Определите коды продавцов, работающих по доверенности с заказчиками, живущими в Москве и имеющими рейтинг менее  190 пунктов.


Логическая база данных
Физическая база данных


Функции агрегирования
SUM  (только числа)
AVG  (только числа)
COUNT
MIN
MAX


FOREIGN KEY (столбец_1, столбец_2)
REFERENCES таблица_1(столбец_1, столбец_2)
[ON DELETE действие]
[ON UPDATE действие]


companies 				users
id                      id
name					name
						age	
						company_id
						
CASCADE - автоматически удаляет или изменяет строки из зависимой таблицы
при удалении или изменении связанных строк в главной таблице

SET NULL - при удалении или обновлении связанной строки из главной таблицы  
устанавливает для столбца внешнего ключа значение NULL

RESTRICT (NO ACTION) - отклоняет удаление или изменение в главной таблице при наличии связанных строк в зависимой таблице

SET DEFAULT - при удалении связанной строки из главной таблицы устанавливает для столбца внешнего ключа значение по умолчанию, которое задается с помощью атрибута DEFAULT


CREATE TABLE companies(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
);
CREATE TABLE users(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER,
    company_id INTEGER,
    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
);

books					
id
title
count_page
price


author_books
id
books_id
author_id


author
id
name
age
	

CREATE TABLE books(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    count_page INTEGER NOT NULL CHECK (count_page > 0),
    price REAL CHECK (price > 0)
);

CREATE TABLE author(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER CHECK (age > 16)
);

CREATE TABLE author_books(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    book_id INTEGER NOT NULL,
    author_id INTEGER NOT NULL,
    FOREIGN KEY (book_id) REFERENCES books(id)
    FOREIGN KEY (author_id) REFERENCES author(id)
);	

Подзапросы (вложенные запросы)
	(=, ==, <>, !=, >, >=, <, <=)
	IN (NOT IN)


6.	Подсчитать сколько различных предметов сдавалось в сессию.

7.	Напишите запрос, который выводит средний балл по экзаменам Васильевой.

8.	Определите сколько человек учится на каждой специальности.

9.	Напишите запрос, который покажет все группы физико-технического факультета.

10.	Вывести список фамилий студентов получивших 5 баллов по дифференциальным уравнениям.

11.	Напишите запрос, который покажет,  сколько экзаменов  сдавал Шутов.

12.	Выведите название кафедры студентов, не сдавших хотя бы один экзамен.

13.	Подсчитать количество кафедр на каждом факультете.

14.	Подсчитать количество пятерок на физико-математическом факультете.

15.	Определите номера зачетных книжек группы ФТ151

16.	Выведите перечень специальностей физико-математического факультета.

EXISTS
UNION, UNION ALL

SELECT столбцы
FROM таблица1 [INNER] JOIN таблица2
ON условие

SELECT столбцы
FROM таблица1 LEFT | RIGHT JOIN таблица2
ON условие
ORDER BY столбец;

models
	__init__.py
	database.py
	student.py
	group.py
	lesson.py
create_database.py
	
	
pip install faker

Jinja

pip install jinja2

{{ переменные }}
{% выражения %}
	
cars = [
	{'model': 'Audi', 'price': 23000},
	{'model': 'Skoda', 'price': 17300},
	{'model': 'Renault', 'price': 44300},
	{'model': 'Wolksvagen', 'price': 21300}
]

persons = [
	{"name": "Алексей", "year": 18, "weight": 78.5},
	{"name": "Никита", "year": 28, "weight": 82.3},
	{"name": "Виталий", "year": 33, "weight": 94.0}
]

template
	index.html
	header.html
	main.html
	footer.html
	dialogs.html
	
	page.html
	about.html
	
	
Flask
Django

pip install flask

flsk
	flsite.py
	

FDataBase.py	
templates
	index.html
	about.html
	base.html
	contact.html
	login.html
static
	css
		style.css
		

http://127.0.0.1:5000/profile/admin/2

int - только целые числа
float - только вещественные числа
path - только допустимые символы url + "/"


http://127.0.0.1:5000/contact?username=admin&email=igor%40gmail.com&message=

flash
get_flashed_messages

http://127.0.0.1:5000/login/

import os
os.urandom(20).hex()

from flsk.flsite import create_db
create_db()

pip install flask-sqlalchemy

tasks
	app.py
	static
		css
			style.css
	templates
		index.html
		base.html
		update.html
		

pip install django

first

django-admin startproject password_generator_project
- создание проекта

cd password_generator_project

python manage.py runserver
- запуск сервера

python manage.py startapp generator
- создание приложения

python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser

python manage.py changepassword имя_пользователя новый_пароль

generator
	templates
		generator
			home.html
			password.html
			base.html
	static
		css
			style.css

http://127.0.0.1:8000/?length=2
http://127.0.0.1:8000/?length=3
http://127.0.0.1:8000/pas?length=1

python manage.py collectstatic


django-admin startproject personal_portfolio
python manage.py startapp skills
python manage.py startapp blog

pip install pillow

third
django-admin startproject todos
python manage.py startapp todo
python manage.py migrate
python manage.py createsuperuser


<h1>Система для обслуживания клиентов</h1>
 <p>Развивайте свой бизнес с помощью продвинутой, но простой в использовании платформы Upservice</p>
 <h2>Для чего нужен Upservice</h2>
 <p>Upservice – это платформа для контроля и управления вашим бизнесом.</p>
 <p>Помогает находить слабые стороны в работе сотрудников и улучшать уровень обслуживания клиентов.</p> 

models.CASCADE - если пользователь будет удален, то удалятся все его задачи
models.PROTECT - запрещает удалять пользователя, пока у него есть задачи
models.SET_NULL - задачи останутся в базе, даже при удалениии пользователя, но значение в поле задачи изменится на Null
models.SET_DEFAULT - задачи останутся в базе, даже при удалениии пользователя, но значение в поле задачи изменится на значение по умолчанию

fourth
django-admin startproject devsearch
python manage.py startapp projects
python manage.py startapp users

	base.html
	projects.html
	navbar.html
	
static
	images
	styles
	uikit
	
ForeingKey - один ко многим
ManyToManyField - многие ко многим
OneToOneField - один к одному


python manage.py shell

from projects.models import Project

Project.objects.all()
Project.objects.get(id=1)
Project.objects.filter(id=1)
Project.objects.filter(title__startswith="Website")
Project.objects.filter(title__icontains="web")
Project.objects.filter(vote_total__gt=37)
Project.objects.filter(vote_total__gte=37)
Project.objects.exclude(id=1)
Project.objects.exclude(title__icontains="web")

quit()

Ataur
&ataur123456

http://127.0.0.1:8000/?search_query=gor
http://127.0.0.1:8000/projects/?page=5

utils.py

pagination.html

http://127.0.0.1:8000/projects/?search_query=web
http://127.0.0.1:8000/projects/?page=2

http://127.0.0.1:8000/projects/?search_query=web&page=2

http://127.0.0.1:8000/projects/?search_query=web&page=2

http://127.0.0.1:8000/projects/?search_query=web
http://127.0.0.1:8000/projects/?search_query=web&page=2
http://127.0.0.1:8000/projects/?search_query=web&page=3

http://127.0.0.1:8000/projects/?search_query=page
http://127.0.0.1:8000/projects/?search_query=page&page=2



message_form.html

django-admin startproject programming_blog
python manage.py startapp blog


str - любая непустая строка, исключая символ "/"
int - любое положительное число, включая 0
slug - буквы латинского алфавита, символ дефиса и подчеркивания
uuid - цифры, буквы латинского алфавита, дефис
path - любая непустая строка, включая символ "/"


inclusion tags - включающие теги
templatetags
	__init__.py
	blog_tags.py
	
utils.py

http://127.0.0.1:8000/


git init
git add -A
git commit -m "blog"

git push -u origin master

git clone https://github.com/Helen-prog/blog.git

mkvirtualenv --python=/usr/bin/python3.10 blogvenv
mkvirtualenv --python=/usr/bin/python3.9 blogvenv

deactivate
- для выхода из виртуального окружения

workon blogvenv
- для повторного входа

pip install django
pip install pillow
pip install django-simple-captcha
pip install django-ckeditor

/home/HelenKozovyakina/blog
/home/HelenKozovyakina/blog/static
/home/HelenKozovyakina/blog/media


python manage.py collectstatic

http://helenkozovyakina.pythonanywhere.com/
https://helenkozovyakina.pythonanywhere.com/


django-admin startproject landing_page
python manage.py startapp cms
python manage.py startapp price
python manage.py startapp crm


